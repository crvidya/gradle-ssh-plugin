{"name":"Gradle SSH Plugin","tagline":"A Gradle plugin providing remote command execution and file transfer capabilities","body":"Gradle SSH Plugin [![Build Status](https://travis-ci.org/int128/gradle-ssh-plugin.png?branch=master)](https://travis-ci.org/int128/gradle-ssh-plugin)\r\n=================\r\n\r\nThis plugin provides remote command execution and file transfer capabilities.\r\n\r\nSee also [test features](acceptance-test/features.gradle) and [release note](https://github.com/int128/gradle-ssh-plugin/releases).\r\n\r\n\r\nHow to use\r\n----------\r\n\r\nAdd a dependency and apply it in your build.gradle:\r\n\r\n```groovy\r\nbuildscript {\r\n  repositories {\r\n    mavenCentral()\r\n  }\r\n  dependencies {\r\n    classpath 'org.hidetake:gradle-ssh-plugin:0.2.2'\r\n  }\r\n}\r\n\r\napply plugin: 'ssh'\r\n```\r\n\r\n\r\nDefine remote hosts\r\n-------------------\r\n\r\nAt first, define remote hosts:\r\n\r\n```groovy\r\nremotes {\r\n  web01 {\r\n    host = '192.168.1.101'\r\n    user = 'jenkins'\r\n    password = System.properties['ssh.password']\r\n  }\r\n}\r\n```\r\n\r\n\r\nDefine a SSH task\r\n-----------------\r\n\r\nTo define a SSH task, use `task(type: SshTask)` like:\r\n\r\n```groovy\r\ntask checkWebServer(type: SshTask) {\r\n  session(remotes.web01) {\r\n    def pids = execute('pidof nginx').split(/ /)\r\n    assert pids.length > 1\r\n  }\r\n}\r\n\r\ntask reloadServers(type: SshTask) {\r\n  session(remotes.role('webServers', 'dbServers')) {\r\n    executeBackground('sudo service httpd reload', pty: true)\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Execute a command\r\n\r\nIn the `session` closure, following methods are available:\r\n  * `execute(command)` - Executes a command. This method blocks until the command is completed and returns output of the command.\r\n  * `executeSudo(command)` - Executes a command as sudo (prepends sudo -S -p). Used to support sudo commands requiring password. This method blocks until the command is completed and returns output of the command.\r\n  * `executeBackground(command)` - Executes a command in background. Other operations will be performed concurrently.\r\n  * `shell` - Opens a shell. This method blocks until the shell is finished. Note that you should provide termination input such as `exit` or `quit` with the interaction closure.\r\n\r\n\r\n#### Interact with the stream\r\n\r\n`execute` and `shell` method can take a closure for interaction.\r\n```groovy\r\nexecute('passwd', pty: true) {\r\n  interaction {\r\n    when(partial: ~/.+[Pp]assowrd: */) {\r\n      standardInput << oldPassword << '\\n'\r\n      when(partial: ~/.+[Pp]assowrd: */) {\r\n        standardInput << newPassword << '\\n'\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Transfer a file or directory\r\n\r\nIn the `session` closure, following methods are available:\r\n  * `get(remote, local)` - Fetches a file or directory from remote host.\r\n  * `put(local, remote)` - Sends a file or directory to remote host.\r\n\r\n\r\nUse SSH in the task\r\n-------------------\r\n\r\nTo execute SSH in the task, call `sshexec()` method with a closure:\r\n\r\n```groovy\r\ntask prepareEnvironment {\r\n  doLast {\r\n    def operation = 'reload'\r\n    sshexec {\r\n      session(remotes.role('webServers')) {\r\n        execute(\"sudo service httpd ${operation}\", pty: true)\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\nGlobal settings\r\n---------------\r\n\r\nGlobal settings can be defined in the `ssh` closure:\r\n\r\n```groovy\r\nssh {\r\n  dryRun = true\r\n  identity = file('config/identity.key')\r\n  config(StrictHostKeyChecking: 'no')\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}